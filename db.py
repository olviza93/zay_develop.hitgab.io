import sqlite3

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
conn = sqlite3.connect('psychologist1.db')
cur = conn.cursor()

# üî• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cur.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    avatar_path TEXT DEFAULT NULL;
    first_name TEXT,
    last_name TEXT,
    patronymic TEXT,
    birth_date DATE,
    phone_number TEXT,
    telegram_id INTEGER DEFAULT NULL,
    telegram_nickname TEXT DEFAULT NULL,
    experience BOOLEAN DEFAULT FALSE,
    mental_illness BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ (–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ status)
cur.execute('''
CREATE TABLE IF NOT EXISTS psychologists (
    user_id INTEGER PRIMARY KEY,
    status TEXT CHECK(status IN ('admin', 'user')),
    FOREIGN KEY(user_id) REFERENCES users(id)
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
cur.execute('''
CREATE TABLE IF NOT EXISTS test_questions (
    question_id INTEGER PRIMARY KEY AUTOINCREMENT,
    diagnostic_id INTEGER NOT NULL,
    question_text TEXT NOT NULL,
    scale TEXT NOT NULL,
    FOREIGN KEY(diagnostic_id) REFERENCES diagnostics(diagnostic_id)
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
cur.execute('''
CREATE TABLE IF NOT EXISTS answers_options (
    option_id INTEGER PRIMARY KEY AUTOINCREMENT,
    question_id INTEGER NOT NULL,
    option_text TEXT NOT NULL,
    points INTEGER NOT NULL,
    FOREIGN KEY(question_id) REFERENCES test_questions(question_id)
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫
cur.execute('''
CREATE TABLE IF NOT EXISTS diagnostics (
    diagnostic_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT,
    questions_count INTEGER,
    duration_minutes INTEGER
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
cur.execute('''
CREATE TABLE IF NOT EXISTS final_results (
    result_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    diagnostic_id INTEGER NOT NULL,
    raw_result_json TEXT,
    qualitative_result_json TEXT,
    passed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(diagnostic_id) REFERENCES diagnostics(diagnostic_id)
)
''')

# –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
cur.execute('''
CREATE TABLE IF NOT EXISTS temp_answers (
    user_id INTEGER,
    diagnostic_id INTEGER,
    question_id INTEGER,
    option_id INTEGER,
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(diagnostic_id) REFERENCES diagnostics(diagnostic_id),
    FOREIGN KEY(question_id) REFERENCES test_questions(question_id),
    FOREIGN KEY(option_id) REFERENCES answers_options(option_id),
    PRIMARY KEY(user_id, diagnostic_id, question_id)
)
''')

# üî• –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏

# 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
cur.execute("""
    INSERT INTO diagnostics (title, description, questions_count, duration_minutes)
    VALUES ('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–≥–∏', '–û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.', 3, 5)
""")

# 2. –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Ö —à–∫–∞–ª—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
cur.execute("INSERT INTO test_questions (diagnostic_id, question_text, scale) VALUES (1, '–ß–∞—Å—Ç–æ—Ç–∞ —á—É–≤—Å—Ç–≤–∞ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞', 'anxiety')")
cur.execute("INSERT INTO test_questions (diagnostic_id, question_text, scale) VALUES (1, '–ù–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–ª', 'stress')")
cur.execute("INSERT INTO test_questions (diagnostic_id, question_text, scale) VALUES (1, '–£—Ä–æ–≤–µ–Ω—å —É—Ç–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–≥–æ –¥–Ω—è', 'fatigue')")

# 3. –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (1, '–û—á–µ–Ω—å —Ä–µ–¥–∫–æ', 1)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (1, '–ò–Ω–æ–≥–¥–∞', 2)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (1, '–ß–∞—Å—Ç–æ', 3)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (1, '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ–≥–¥–∞', 4)")

# 4. –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (2, '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞', 1)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (2, '–†–µ–¥–∫–æ', 2)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (2, '–ò–Ω–æ–≥–¥–∞', 3)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (2, '–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞', 4)")

# 5. –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (3, '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞', 1)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (3, '–†–µ–¥–∫–æ', 2)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (3, '–ò–Ω–æ–≥–¥–∞', 3)")
cur.execute("INSERT INTO answers_options (question_id, option_text, points) VALUES (3, '–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞', 4)")

# –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn.commit()
conn.close()